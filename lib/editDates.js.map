{
  "version": 3,
  "sources": ["../app/editDates.ts"],
  "sourcesContent": ["const msInADay: number = 86400000;\r\n\r\nfunction createDateRange(start: number, end: number): number[] {\r\n  const dateList: number[] = [];\r\n  let day: number = start;\r\n  if (end === start) {\r\n    return [start];\r\n  }\r\n\r\n  end -= msInADay;\r\n\r\n  while (day !== end) {\r\n    // Add 1 day, and push to list of dates\r\n    day += msInADay;\r\n    dateList.push(day);\r\n  }\r\n  return [start, ...dateList, (end += msInADay)];\r\n}\r\n\r\ninterface DateTable {\r\n  [timestamp: string]: number;\r\n}\r\n\r\nfunction updateDates(\r\n  dateTable: DateTable,\r\n  startDate: number,\r\n  endDate: number,\r\n  quantity: number,\r\n  totalQuantityForProduct: number\r\n) {\r\n  const dateTableKeys: string[] = Object.keys(dateTable);\r\n\r\n  // Filter for dates within start date and end date\r\n  const datesInRange = dateTableKeys.filter((date) => {\r\n    return parseInt(date) >= startDate && parseInt(date) <= endDate;\r\n  });\r\n\r\n  // Get quanties of dates within start date and end date\r\n  const quantitiesInRange = datesInRange.map(\r\n    (timestamp) => dateTable[timestamp.toString()]\r\n  );\r\n\r\n  // Get list of dates to be added\r\n  const datesToBeAdded = createDateRange(startDate, endDate);\r\n\r\n  // Check if the amount of product on that day minus quantity ordered is over 0, or if there are no orders during that timespan\r\n  if (\r\n    quantitiesInRange.some((productOnDay) => productOnDay - quantity > 0) ||\r\n    quantitiesInRange.length < 1\r\n  ) {\r\n    // Edit dateTable object to get final dates\r\n    for (const date of datesToBeAdded) {\r\n      if (dateTable[date]) {\r\n        // If date already exists, subtract quantity from it\r\n        dateTable[date] -= quantity;\r\n      } else {\r\n        // Else add that day, and set quantity to total quantity minus amount ordered\r\n        dateTable[date] = totalQuantityForProduct - quantity;\r\n      }\r\n    }\r\n    const returnDate = endDate + msInADay;\r\n    if (dateTable[returnDate]) {\r\n      // Add quantity back to date object after order completed if existing quantity on that day\r\n      dateTable[returnDate] += quantity;\r\n    } else {\r\n      // Else set quantity to total\r\n      dateTable[returnDate] = totalQuantityForProduct;\r\n    }\r\n    return dateTable;\r\n  }\r\n}\r\n\r\nexport { createDateRange, updateDates, DateTable };\r\n"],
  "mappings": "qIAAA,wDAAM,GAAmB,MAEzB,WAAyB,EAAe,EAAuB,CAC7D,GAAM,GAAqB,GACvB,EAAc,EAClB,GAAI,IAAQ,EACV,MAAO,CAAC,GAKV,IAFA,GAAO,EAEA,IAAQ,GAEb,GAAO,EACP,EAAS,KAAK,GAEhB,MAAO,CAAC,EAAO,GAAG,EAAW,GAAO,GAOtC,WACE,EACA,EACA,EACA,EACA,EACA,CASA,GAAM,GAAoB,AALL,AAHW,OAAO,KAAK,GAGT,OAAO,AAAC,GAClC,SAAS,IAAS,GAAa,SAAS,IAAS,GAInB,IACrC,AAAC,GAAc,EAAU,EAAU,aAI/B,EAAiB,EAAgB,EAAW,GAGlD,GACE,EAAkB,KAAK,AAAC,GAAiB,EAAe,EAAW,IACnE,EAAkB,OAAS,EAC3B,CAEA,OAAW,KAAQ,GACjB,AAAI,EAAU,GAEZ,EAAU,IAAS,EAGnB,EAAU,GAAQ,EAA0B,EAGhD,GAAM,GAAa,EAAU,EAC7B,MAAI,GAAU,GAEZ,EAAU,IAAe,EAGzB,EAAU,GAAc,EAEnB",
  "names": []
}
