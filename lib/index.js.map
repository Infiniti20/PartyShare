{
  "version": 3,
  "sources": ["../app/utils.ts", "../app/index.ts", "../app/database.ts"],
  "sourcesContent": ["const crypto = require('crypto');\r\nconst fs = require(\"fs\")\r\n\r\n\r\n\r\nexport default {\r\n\tcomputeHash: function (text: string):string {\r\n\t\tconst hash = crypto.createHash('sha256').update(text).digest('base64');\r\n\t\treturn hash\r\n\t},\r\n\tgenerateUUID: function (pattern?: string):string {\r\n\t\treturn 'xxxxxxxx-xxxx-4xxxx-xxx-x'.replace(/[xy]/g, function (c) {\r\n\t\t\tvar r = Math.random() * 16 | 0,\r\n\t\t\t\tv = c == 'x' ? r : (r & 0x3 | 0x8);\r\n\t\t\treturn v.toString(16);\r\n\t\t});\r\n\t},\r\n\tfilter: function (req: any, file: any, cb: any) {\r\n\t\t// Accept images only\r\n\t\tif (!file.originalname.match(/\\.(jpg|JPG|jpeg|JPEG|png|PNG)$/)) {\r\n\t\t\treq.fileValidationError = 'Only image files are allowed';\r\n\t\t\treturn cb(new Error('Only image files are allowed'), false);\r\n\t\t}\r\n\t\tcb(null, true);\r\n\t},\r\n\tgetExt: function (filename:string):string {\r\n\t\tvar i = filename.lastIndexOf('.');\r\n\t\treturn (i < 0) ? '' : filename.substr(i);\r\n\t},\r\n\treplaceValues: function (str:string, values: any):string {\r\n\t\tvar str = str.replace(/\\[\\w*\\]/g, function (match, val) {\r\n\t\t\treturn values[match.slice(1, -1)] || match;\r\n\t\t});\r\n\t\treturn str\r\n\t},\r\n\tgetFileStream: async function (path: string){\r\n\t\tlet reader = fs.createReadStream(path);\r\n\r\n\t\tlet promise = new Promise(function (resolve, reject) {\r\n\t\t\treader.on('data', (chunk: Buffer) => resolve(chunk.toString()));\r\n\t\t\treader.on('error', reject); \r\n\t\t});\r\n\r\n\t\tlet data = await promise;\r\n\t\treturn data\r\n\t}\r\n\r\n}\r\n", "import utils from \"./utils\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nconst URL = \"http://partyshare.ca\";\r\n\r\n// Database setup\r\nimport { Database } from \"./database\";\r\nimport { order, account, customer, product } from \"./types\";\r\nconst db = new Database(\"database/partyshare.db\");\r\n\r\nasync function createDB() {\r\n  db.exec(\r\n    \"CREATE TABLE IF NOT EXISTS accounts ( id varchar(25) PRIMARY KEY, name varchar(100), email varchar(80), authID varchar(28), location varchar(250) ) \"\r\n  );\r\n  db.exec(\r\n    \"CREATE TABLE IF NOT EXISTS products ( name varchar(75), id varchar(25), accountID varchar(25), imageURL varchar(55), category varchar(12), desc varchar(250), info varchar(200), quantity int, price int, deposit int )\"\r\n  );\r\n}\r\n\r\ncreateDB();\r\n\r\n//Express imports\r\nimport express from \"express\";\r\nimport cookieParser from \"cookie-parser\";\r\n\r\nconst app = express();\r\n\r\n//Express addons for parsing data from the request\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(cookieParser());\r\n\r\n//Firebase Setup\r\nimport firebase from \"firebase-admin\";\r\nimport adminSDK from \"../admin-sdk.json\";\r\n\r\nfirebase.initializeApp({\r\n  credential: firebase.credential.cert(adminSDK as firebase.ServiceAccount),\r\n  storageBucket: process.env.BUCKET_URL,\r\n});\r\n\r\nconst firedb = firebase.firestore();\r\n\r\n//Stripe setup\r\nimport Stripe from \"stripe\";\r\n\r\nconst stripe = new Stripe(process.env.StripeSK, {\r\n  apiVersion: \"2020-08-27\",\r\n});\r\n\r\napp.set(\"view engine\", \"ejs\");\r\napp.use(\"/views\", express.static(\"views\"));\r\n\r\n// ! Functions\r\nasync function AuthWithCookies(\r\n  idToken: string,\r\n  days: number,\r\n  res: express.Response\r\n): Promise<void> {\r\n  const expiresIn = 60 * 60 * 24 * days * 1000;\r\n\r\n  let sessionCookie = await firebase\r\n    .auth()\r\n    .createSessionCookie(idToken, { expiresIn });\r\n\r\n  const options = { maxAge: expiresIn }; // httpOnly: true, secure: true };\r\n  res.cookie(\"session\", sessionCookie, options);\r\n}\r\n\r\n// ! Routes\r\n\r\n// * HTML REQUESTS\r\napp.get(\"/\", async (req, res) => {\r\n  res.render(\"homepage/index\", { acc: req.cookies.session });\r\n});\r\n\r\napp.get(\"/faq\", async (req, res) => {\r\n  res.render(\"faq/index\", {\r\n    acc: req.cookies.session,\r\n    faqs: [\r\n      {\r\n        title: \"How do I start renting on PartyShare?\",\r\n        text: \"You can contact me at janakhosa@gmail.com to get in touch, and we can help you set up your account!\",\r\n      },\r\n      {\r\n        title: \"Will I get my deposit back?\",\r\n        text: \"Yes! It does take 5 to 10 business days for it to actually show up in your account, so you may not see it right away.\",\r\n      },\r\n      {\r\n        title: \"What information does PartyShare store about me?\",\r\n        text: \"PartyShare only stores your email address and nothing else! This is just to contact you about your order, and give you updates on it.\",\r\n      },\r\n    ],\r\n  });\r\n});\r\n\r\napp.get(\"/vendor-login\", async (req, res) => {\r\n  res.render(\"vendor-login/index\", { acc: req.cookies.session });\r\n});\r\n\r\napp.get(\"/accounts/create\", async (req, res) => {\r\n  const hash = utils.computeHash(Math.random().toString()).replace(\"/\", \"|\");\r\n  const account = await stripe.accounts.create({\r\n    type: \"express\",\r\n    country: \"CA\",\r\n    business_type: \"individual\",\r\n  });\r\n\r\n  const accountLinks = await stripe.accountLinks.create({\r\n    account: account.id,\r\n    refresh_url: `${URL}/accounts/create`,\r\n    return_url: `${URL}/accounts/create/${hash}`,\r\n    type: \"account_onboarding\",\r\n  });\r\n\r\n  res.cookie(\"stripeID\", account.id);\r\n  res.redirect(accountLinks.url);\r\n});\r\n\r\napp.get(\"/accounts/create/:hash\", async (req, res) => {\r\n  res.render(\"create-account/index\");\r\n});\r\n\r\n// * POST REQUESTS\r\napp.post(\"/accounts/login\", async (req, res) => {\r\n  let idToken = req.body.idToken;\r\n  const authID = (await firebase.auth().verifyIdToken(idToken)).uid;\r\n\r\n  await AuthWithCookies(idToken, 14, res);\r\n\r\n  res.end(JSON.stringify({ status: \"success\" }));\r\n});\r\n\r\napp.post(\"/accounts/create\", async (req, res) => {\r\n  let idToken = req.body.idToken;\r\n  const authID = (await firebase.auth().verifyIdToken(idToken)).uid;\r\n\r\n  await AuthWithCookies(idToken, 14, res);\r\n\r\n  const account: account = {\r\n    id: req.cookies.stripeID,\r\n    name: req.body.name,\r\n    email: req.body.email,\r\n    authID,\r\n    location: req.body.location,\r\n  };\r\n  await db.run(\r\n    \"INSERT INTO accounts VALUES (?, ?, ?, ?, ?);\",\r\n    ...Object.values(account)\r\n  );\r\n\r\n  res.clearCookie(\"stripeID\");\r\n  res.end(JSON.stringify({ status: \"completed\" }));\r\n});\r\n\r\n// * GET REQUESTS\r\napp.get(\"/logout\", async (req, res) => {\r\n  res.clearCookie(\"session\");\r\n  res.redirect(\"/\");\r\n});\r\n\r\napp.listen(80, () => {\r\n  console.log(\"Server running...\");\r\n  console.log(\"\");\r\n});\r\n", "import sqlite from \"sqlite3\";\r\nsqlite.verbose();\r\n\r\nclass Database {\r\n  _db: sqlite.Database;\r\n\r\n  constructor(path: string) {\r\n    this._db = new sqlite.Database(path);\r\n    this._db.run(\"PRAGMA journal_mode = WAL\");\r\n  }\r\n\r\n  run(query: string, ...params: any) {\r\n    return new Promise((resolve, reject) => {\r\n      this._db.run(\r\n        query,\r\n        ...params,\r\n        function (this: any, err: Error | null) {\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            resolve(this);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  get(query: string, ...params: any) {\r\n    return new Promise((resolve, reject) => {\r\n      this._db.get(query, ...params, (err: Error | null, row: any) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(row);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  all(query: string, ...params: any) {\r\n    return new Promise((resolve, reject) => {\r\n      this._db.all(query, ...params, (err: Error | null, rows: any[]) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(rows);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  exec(query: string, ...params: any) {\r\n    return new Promise((resolve, reject) => {\r\n      this._db.exec(query, (err: Error | null) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(this);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { Database };\r\n"],
  "mappings": "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",
  "names": []
}
