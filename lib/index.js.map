{
  "version": 3,
  "sources": ["../app/utils.ts", "../app/index.ts", "../app/database.ts", "../app/cache.ts", "../app/editDates.ts", "../app/schedule.ts"],
  "sourcesContent": ["import crypto from \"crypto\";\r\nimport fs from \"fs\";\r\nimport nodemailer from \"nodemailer\";\r\n\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  service: \"gmail\",\r\n  auth: {\r\n    user: process.env.EMAIL,\r\n    pass: process.env.PASSWORD,\r\n  },\r\n});\r\n\r\nexport default {\r\n  computeHash: function (text: string): string {\r\n    const hash = crypto.createHash(\"sha256\").update(text).digest(\"base64\");\r\n    return hash;\r\n  },\r\n  generateUID: function (pattern?: string): string {\r\n    return \"xxxxxxxx-xxxx-4xxxx-xxx-x\".replace(/[xy]/g, function (c) {\r\n      var r = (Math.random() * 16) | 0,\r\n        v = c == \"x\" ? r : (r & 0x3) | 0x8;\r\n      return v.toString(16);\r\n    });\r\n  },\r\n  filter: function (req: any, file: any, cb: any) {\r\n    // Accept images only\r\n    if (\r\n      !file.originalname.match(\r\n        /\\.(jpg|JPG|jpeg|JPEG|png|PNG|jfif|JFIF|webm|WEBM)$/\r\n      )\r\n    ) {\r\n      req.fileValidationError = \"Only image files are allowed\";\r\n      return cb(new Error(\"Only image files are allowed\"), false);\r\n    }\r\n    cb(null, true);\r\n  },\r\n  getExt: function (filename: string): string {\r\n    var i = filename.lastIndexOf(\".\");\r\n    return i < 0 ? \"\" : filename.substr(i);\r\n  },\r\n  replaceValues: function (str: string, values: any): string {\r\n    var str = str.replace(/\\[\\w*\\]/g, function (match, val) {\r\n      return values[match.slice(1, -1)] || match;\r\n    });\r\n    return str;\r\n  },\r\n  getFileStream: async function (path: string) {\r\n    let reader = fs.createReadStream(path);\r\n\r\n    let promise = new Promise(function (resolve, reject) {\r\n      reader.on(\"data\", (chunk: Buffer) => resolve(chunk.toString()));\r\n      reader.on(\"error\", reject);\r\n    });\r\n\r\n    let data = await promise;\r\n    return data;\r\n  },\r\n  sendMail: async function (\r\n    recipient: string,\r\n    subject: string,\r\n    templatePath: string,\r\n    props: { [prop: string]: any }\r\n  ) {\r\n    const template = await this.getFileStream(templatePath);\r\n    const mailOptions = {\r\n      from: process.env.EMAIL,\r\n      to: recipient,\r\n      subject,\r\n      html: this.replaceValues(template, props),\r\n    };\r\n    transporter.sendMail(mailOptions, function (error: any, info: any) {\r\n      if (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  },\r\n};\r\n", "import utils from \"./utils\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nconst URL = process.env.BASE_URL;\r\n\r\n// Database setup\r\nimport { Database } from \"./database\";\r\nimport { order, account, customer, product, subimage } from \"./types\";\r\nconst db = new Database(\"database/partyshare.db\");\r\n\r\n// async function createDB() {\r\n//   await db.exec(\r\n//     \"CREATE TABLE IF NOT EXISTS accounts ( id varchar(25) PRIMARY KEY, name varchar(100), email varchar(80), authID varchar(28), location varchar(250) ) \"\r\n//   );\r\n//   await db.exec(\r\n//     \"CREATE TABLE IF NOT EXISTS products ( name varchar(75), id varchar(25) PRIMARY KEY, accountID varchar(25), imageURL varchar(55), category varchar(12), desc varchar(250), info varchar(200), quantity int, price int, FOREIGN KEY(accountID) REFERENCES accounts(id) )\"\r\n//   );\r\n//   await db.exec(\"PRAGMA foreign_keys = ON\");\r\n// }\r\n\r\n// createDB();\r\n\r\nimport { CacheLayer } from \"./cache\";\r\nconst cache = new CacheLayer();\r\n\r\n// Express imports\r\nimport express from \"express\";\r\nimport cookieParser from \"cookie-parser\";\r\n\r\nconst app = express();\r\n\r\n// Express addons for parsing data from the request\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(cookieParser());\r\napp.set(\"view engine\", \"ejs\");\r\napp.use(\"/views\", express.static(\"views\"));\r\n\r\n// Firebase Setup\r\nimport firebase from \"firebase-admin\";\r\nimport adminSDK from \"../admin-sdk.json\";\r\n\r\nfirebase.initializeApp({\r\n  credential: firebase.credential.cert(adminSDK as firebase.ServiceAccount),\r\n  storageBucket: process.env.BUCKET_URL,\r\n});\r\n\r\nconst firedb = firebase.firestore();\r\nconst bucket = firebase.storage().bucket();\r\n\r\n// Stripe setup\r\nimport Stripe from \"stripe\";\r\n\r\nconst stripe = new Stripe(process.env.STRIPE_KEY, {\r\n  apiVersion: \"2020-08-27\",\r\n});\r\n\r\n// Sharp setup\r\nimport sharp from \"sharp\";\r\n\r\n//Multer setup\r\nimport multer from \"multer\";\r\nconst upload = multer({\r\n  storage: multer.memoryStorage(),\r\n  fileFilter: utils.filter,\r\n});\r\n\r\n// Date editing setup\r\nimport { updateDates, DateTable } from \"./editDates\";\r\n\r\n// ! TEMP\r\nimport sourcemap from \"source-map-support\";\r\nsourcemap.install();\r\n\r\n// Scheduling setup\r\nimport {\r\n  addAction,\r\n  addEditAction,\r\n  Job,\r\n  loadJobs,\r\n  scheduleJob,\r\n} from \"./schedule\";\r\n\r\n// ! Functions\r\nasync function authWithCookies(\r\n  idToken: string,\r\n  days: number,\r\n  res: express.Response\r\n): Promise<void> {\r\n  const expiresIn = 60 * 60 * 24 * days * 1000;\r\n\r\n  const sessionCookie = await firebase\r\n    .auth()\r\n    .createSessionCookie(idToken, { expiresIn });\r\n\r\n  const options = { maxAge: expiresIn }; // httpOnly: true, secure: true };\r\n  res.cookie(\"session\", sessionCookie, options);\r\n}\r\n\r\nasync function verifyCookie(sessionCookie: string): Promise<string> {\r\n  const data = await firebase\r\n    .auth()\r\n    .verifySessionCookie(sessionCookie || \"\")\r\n    .catch(() => {\r\n      return { uid: \"\" };\r\n    });\r\n  return data.uid || undefined;\r\n}\r\n\r\nasync function getUser(uid: string): Promise<account> {\r\n  return (await cache.getAsync(uid, async () => {\r\n    return await db.get(\"SELECT * FROM accounts WHERE authID = ?\", uid);\r\n  })) as account;\r\n}\r\n\r\nasync function persistSchedule() {\r\n  const rawJobs = await firedb.collection(\"scheduling\").get();\r\n  const jobs: { [job: string]: any } = {};\r\n  rawJobs.docs.forEach((doc) => {\r\n    jobs[doc.id] = doc.data() as Job;\r\n  });\r\n  await loadJobs(jobs);\r\n}\r\n\r\nasync function addJob(\r\n  actionName: string,\r\n  func: (...args: any) => any,\r\n  args: any,\r\n  date: Date\r\n) {\r\n  await firedb.collection(\"scheduling\").add({\r\n    date: date.getTime(),\r\n    name: actionName,\r\n    args,\r\n    passed: false,\r\n  });\r\n  scheduleJob(func, args, date);\r\n}\r\n\r\nasync function editDB(id: string) {\r\n  await firedb\r\n    .collection(\"scheduling\")\r\n    .doc(id)\r\n    .set({ passed: true }, { merge: true });\r\n}\r\n\r\nasync function completeOrder(\r\n  productID: string,\r\n  total: number,\r\n  customer: customer,\r\n  customerCard: string,\r\n  returnDate: number,\r\n  quantity: number\r\n) {\r\n  const product = (await cache.getAsync(productID, async () => {\r\n    return await db.get(\"SELECT * FROM products WHERE id = ?\", productID);\r\n  })) as product;\r\n\r\n  const account = (await cache.getAsync(product.accountID, async () => {\r\n    return await db.get(\r\n      \"SELECT * FROM accounts WHERE id = ?\",\r\n      product.accountID\r\n    );\r\n  })) as account;\r\n\r\n  // tslint:disable-next-line:no-floating-promises\r\n  utils.sendMail(\r\n    customer.email,\r\n    \"Order Pickup\",\r\n    \"views/templates/pickup-cus.html\",\r\n    {\r\n      USER: customer.name,\r\n      EMAIL: account.email,\r\n      LOCATION: account.location,\r\n    }\r\n  );\r\n\r\n  // tslint:disable-next-line:no-floating-promises\r\n  utils.sendMail(\r\n    account.email,\r\n    \"Order Pickup\",\r\n    \"views/templates/pickup-vendor.html\",\r\n    {\r\n      USER: account.name,\r\n      CUSTOMER: customer.name,\r\n      ITEM: product.name,\r\n      QUANTITY: quantity,\r\n      DATE: new Date(returnDate).toDateString(),\r\n    }\r\n  );\r\n\r\n  const percentageTaken = (total / 100) * parseInt(process.env.PERCENTAGE);\r\n\r\n  const paymentIntent = await stripe.paymentIntents.create({\r\n    amount: total,\r\n    currency: \"cad\",\r\n    customer: customer.id,\r\n    payment_method: customerCard,\r\n    application_fee_amount: percentageTaken,\r\n    off_session: true,\r\n    confirm: true,\r\n    transfer_data: {\r\n      destination: product.accountID,\r\n    },\r\n  });\r\n}\r\n\r\naddEditAction(editDB);\r\naddAction(\"completeOrder\", completeOrder);\r\n\r\n// ! Routes\r\n\r\n// * HTML REQUESTS\r\napp.get(\"/\", async (req, res) => {\r\n  const products = (await cache.getAsync(\"explore\", async () => {\r\n    return await db.all(\"SELECT id, name, imageURL, price FROM products\");\r\n  })) as product[];\r\n  res.render(\"main/index\", { acc: req.cookies.session, products });\r\n});\r\n\r\napp.get(\"/search\", async (req, res) => {\r\n  const products = (await db.all(\r\n    \"SELECT id, name, imageURL, price FROM products WHERE name LIKE ? AND category LIKE ?\",\r\n    `%${req.query.query}%`,\r\n    `%${req.query.category || \"\"}%`\r\n  )) as product;\r\n  res.render(\"main/index\", { acc: req.cookies.session, products });\r\n});\r\n\r\n// ! Add option to disable renting through site, force contact through email for third party businesses.\r\napp.get(\"/product/:id\", async (req, res) => {\r\n  const cachedFireData = await cache.getAsync(\r\n    `fire-${req.params.id}`,\r\n    async () => {\r\n      const firedata = await firedb\r\n        .collection(\"products\")\r\n        .doc(req.params.id)\r\n        .get();\r\n      return await firedata.data();\r\n    },\r\n    1209600000\r\n  );\r\n  let uid = \"\";\r\n  if (req.cookies.session !== undefined) {\r\n    uid = (await cache.getAsync(\r\n      req.cookies.session,\r\n      async () => await verifyCookie(req.cookies.session),\r\n      3600000\r\n    )) as string;\r\n  }\r\n\r\n  const product = (await cache.getAsync(req.params.id, async () => {\r\n    return await db.get(\"SELECT * FROM products WHERE id = ?\", req.params.id);\r\n  })) as product;\r\n\r\n  const account = (await cache.getAsync(product.accountID, async () => {\r\n    return await db.get(\r\n      \"SELECT * FROM accounts WHERE id = ?\",\r\n      product.accountID\r\n    );\r\n  })) as account;\r\n\r\n  const subimages = (await cache.getAsync(\r\n    `subimages-${product.id}`,\r\n    async () => {\r\n      return await db.all(\r\n        \"SELECT * FROM subimages WHERE productId = ?\",\r\n        product.id\r\n      );\r\n    }\r\n  )) as subimage[];\r\n\r\n  console.log(subimages);\r\n\r\n  res.render(\"product-info/index\", {\r\n    product,\r\n    account,\r\n    dates: cachedFireData,\r\n    acc: req.cookies.session,\r\n    uid: uid ?? \"\",\r\n    subimages,\r\n  });\r\n});\r\n\r\napp.get(\"/faq\", async (req, res) => {\r\n  res.render(\"faq/index\", {\r\n    acc: req.cookies.session,\r\n    faqs: [\r\n      {\r\n        title: \"How do I start renting on PartyShare?\",\r\n        text: \"You can contact me at janakhosa@gmail.com to get in touch, and we can help you set up your account!\",\r\n      },\r\n      {\r\n        title: \"What information does PartyShare store about me?\",\r\n        text: \"PartyShare only stores your email address and nothing else! This is just to contact you about your order, and give you updates on it.\",\r\n      },\r\n    ],\r\n  });\r\n});\r\n\r\napp.get(\"/about-us\", async(req,res)=>{\r\n  res.render(\"about-us/index\")\r\n})\r\n\r\napp.get(\"/contact\",async (req, res) => {\r\n  res.render(\"embed/index\", {content: `<p>You can contact me <a href=\"mailto:janakhosa@gmail.com\">here</a> for any special inquiries.</p>`})\r\n})\r\n\r\napp.get(\"/vendor-login\", async (req, res) => {\r\n  res.render(\"vendor-login/index\", { acc: req.cookies.session });\r\n});\r\n\r\napp.get(\"/products/create\", async (req, res) => {\r\n  const uid = (await cache.getAsync(\r\n    req.cookies.session,\r\n    async () => {\r\n      return await verifyCookie(req.cookies.session);\r\n    },\r\n    3600000\r\n  )) as string;\r\n\r\n  if (uid === undefined) {\r\n    res.redirect(\"/\");\r\n  }\r\n\r\n  const user = await getUser(uid);\r\n\r\n  res.render(\"product/index\", { name: user.name });\r\n});\r\n\r\napp.get(\"/products/edit/:id\", async (req, res) => {\r\n  const product = (await cache.getAsync(req.params.id, async () => {\r\n    return await db.get(\"SELECT * FROM products WHERE id = ?\", req.params.id);\r\n  })) as product;\r\n\r\n  const account = (await cache.getAsync(product.accountID, async () => {\r\n    return await db.get(\r\n      \"SELECT * FROM accounts WHERE id = ?\",\r\n      product.accountID\r\n    );\r\n  })) as account;\r\n  const subimages = (await cache.getAsync(\r\n    `subimages-${product.id}`,\r\n    async () => {\r\n      return await db.all(\r\n        \"SELECT * FROM subimages WHERE productId = ?\",\r\n        product.id\r\n      );\r\n    }\r\n  )) as subimage[];\r\n  res.render(\"product/index\", { name: account.name, product, subimages });\r\n});\r\n\r\napp.get(\"/checkout\", (req, res) => {\r\n  try {\r\n    if (!req.cookies.customerID) {\r\n      res.redirect(\"/\");\r\n      return undefined;\r\n    }\r\n    const { secret, product, info } = cache.get(\r\n      `tempcache-${req.cookies.customerID}`,\r\n      () => {\r\n        return \"\";\r\n      }\r\n    );\r\n\r\n    if (!product) {\r\n      res.redirect(\"/\");\r\n      return;\r\n    }\r\n\r\n    res.render(\"checkout/index\", {\r\n      secret,\r\n      product,\r\n      info,\r\n      acc: req.cookies.session,\r\n    });\r\n  } catch {\r\n    res.redirect(\"/\");\r\n  }\r\n});\r\n\r\napp.get(\"/accounts/create\", async (req, res) => {\r\n  const hash = utils.computeHash(Math.random().toString()).replace(\"/\", \"|\");\r\n  const account = await stripe.accounts.create({\r\n    type: \"express\",\r\n    country: \"CA\",\r\n    business_type: \"individual\",\r\n  });\r\n  console.log(`${URL}/accounts/create`);\r\n  const accountLinks = await stripe.accountLinks.create({\r\n    account: account.id,\r\n    refresh_url: `${URL}/accounts/create/`,\r\n    return_url: `${URL}/accounts/create/${hash}/`,\r\n    type: \"account_onboarding\",\r\n  });\r\n\r\n  res.cookie(\"stripeID\", account.id);\r\n  res.redirect(accountLinks.url);\r\n});\r\n\r\napp.get(\"/accounts/create/:hash\", async (req, res) => {\r\n  res.render(\"create-account/index\");\r\n});\r\n\r\n//! * POST REQUESTS\r\n\r\napp.post(\"/accounts/login\", async (req, res) => {\r\n  console.log(req.body);\r\n  const idToken = req.body.idToken;\r\n\r\n  await authWithCookies(idToken, 14, res);\r\n\r\n  res.end(JSON.stringify({ status: \"success\" }));\r\n});\r\n\r\napp.post(\"/accounts/create\", async (req, res) => {\r\n  const idToken = req.body.idToken;\r\n  const authID = (await firebase.auth().verifyIdToken(idToken)).uid;\r\n\r\n  await authWithCookies(idToken, 14, res);\r\n\r\n  const account: account = {\r\n    id: req.cookies.stripeID,\r\n    name: req.body.name,\r\n    email: req.body.email,\r\n    authID,\r\n    location: req.body.location,\r\n  };\r\n  await db.run(\r\n    \"INSERT INTO accounts VALUES (?, ?, ?, ?, ?);\",\r\n    ...Object.values(account)\r\n  );\r\n\r\n  res.clearCookie(\"stripeID\");\r\n  res.end(JSON.stringify({ status: \"completed\" }));\r\n});\r\n\r\napp.post(\r\n  \"/products/create\",\r\n  upload.fields([\r\n    { name: \"image\", maxCount: 1 },\r\n    { name: \"sub-image-1\", maxCount: 1 },\r\n    { name: \"sub-image-2\", maxCount: 1 },\r\n    { name: \"sub-image-3\", maxCount: 1 },\r\n  ]),\r\n  async (req, res) => {\r\n    const uid = (await cache.getAsync(\r\n      req.cookies.session,\r\n      async () => {\r\n        await verifyCookie(req.cookies.session);\r\n      },\r\n      3600000\r\n    )) as string;\r\n    if (uid === undefined) {\r\n      res.redirect(\"/\");\r\n    }\r\n\r\n    const user = await getUser(uid);\r\n    const files = req.files as { [fieldname: string]: Express.Multer.File[] };\r\n    const mainImage = files[\"image\"][0];\r\n\r\n    const name = `${utils\r\n      .computeHash(mainImage.originalname + Math.random())\r\n      .replace(/\\//g, \"|\")}.jpeg`;\r\n\r\n    const sharpFile = await sharp(mainImage.buffer)\r\n      .resize({ width: 350, height: 350 })\r\n      .jpeg({ quality: 70 })\r\n      .toBuffer();\r\n    await bucket\r\n      .file(name)\r\n      .createWriteStream({ metadata: { cacheControl: \"no-cache, max-age=0\" } })\r\n      .end(sharpFile);\r\n\r\n    console.log(req.files);\r\n    const productID = utils.generateUID();\r\n\r\n    for (let i = 1; i < Object.keys(req.files).length; i++) {\r\n      const subimage = files[`sub-image-${i}`][0];\r\n      const subname = `${utils\r\n        .computeHash(subimage.originalname + Math.random())\r\n        .replace(/\\//g, \"|\")}.jpeg`;\r\n      const sharpSubFile = await sharp(subimage.buffer)\r\n        .resize({ width: 350, height: 350 })\r\n        .jpeg({ quality: 70 })\r\n        .toBuffer();\r\n      bucket\r\n        .file(subname)\r\n        .createWriteStream({\r\n          metadata: { cacheControl: \"no-cache, max-age=0\" },\r\n        })\r\n        .end(sharpSubFile);\r\n\r\n      await db.run(\"INSERT INTO subimages VALUES(?,?)\", subname, productID);\r\n    }\r\n\r\n    await db.run(\r\n      \"INSERT INTO products VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)\",\r\n      req.body[\"desktop-name\"] || req.body[\"mobile-name\"],\r\n      productID,\r\n      user.id,\r\n      name,\r\n      req.body.category,\r\n      req.body.desc,\r\n      req.body.info,\r\n      parseInt(req.body.quantity),\r\n      parseInt(req.body.price.substring(1)) * 100\r\n    );\r\n\r\n    cache.del(\"explore\");\r\n\r\n    await firedb.collection(\"products\").doc(productID).set({\r\n      \"1263310860\": 1,\r\n    });\r\n\r\n    cache.set(`fire-${productID}`, {\r\n      \"1263310860\": 1,\r\n    });\r\n\r\n    res.json({ status: \"200 OK\", message: \"Product successfully added.\" });\r\n  }\r\n);\r\n\r\napp.post(\r\n  \"/products/edit/:id\",\r\n  upload.fields([\r\n    { name: \"image\", maxCount: 1 },\r\n    { name: \"sub-image-1\", maxCount: 1 },\r\n    { name: \"sub-image-2\", maxCount: 1 },\r\n    { name: \"sub-image-3\", maxCount: 1 },\r\n  ]),\r\n  async (req, res) => {\r\n    const uid = (await cache.getAsync(\r\n      req.cookies.session,\r\n      async () => {\r\n        await verifyCookie(req.cookies.session);\r\n      },\r\n      3600000\r\n    )) as string;\r\n    if (uid === undefined) {\r\n      res.redirect(\"/\");\r\n      return;\r\n    }\r\n\r\n    const product = (await cache.getAsync(req.params.id, async () => {\r\n      return await db.get(\"SELECT * FROM products WHERE id = ?\", req.params.id);\r\n    })) as product;\r\n\r\n    const user = await getUser(uid);\r\n    if (user.id != product.accountID) {\r\n      res.redirect(\"/\");\r\n      return;\r\n    }\r\n    const files = req.files as {\r\n      [fieldname: string]: Express.Multer.File[];\r\n    };\r\n\r\n    const name = product.imageURL;\r\n\r\n    if (files[\"image\"]) {\r\n      const mainImage = files[\"image\"][0];\r\n      console.log(\"updated image\", name, product.imageURL);\r\n      const sharpFile = await sharp(mainImage.buffer)\r\n        .resize({ width: 350, height: 350 })\r\n        .jpeg({ quality: 70 })\r\n        .toBuffer();\r\n      await bucket\r\n        .file(name)\r\n        .createWriteStream({\r\n          metadata: { cacheControl: \"no-cache, max-age=0\" },\r\n        })\r\n        .end(sharpFile);\r\n    }\r\n    const subimages = (await cache.getAsync(\r\n      `subimages-${product.id}`,\r\n      async () => {\r\n        return await db.all(\r\n          \"SELECT * FROM subimages WHERE productId = ?\",\r\n          product.id\r\n        );\r\n      }\r\n    )) as subimage[];\r\n\r\n    const filesUploaded = Object.keys(req.files);\r\n\r\n    for (let i = 0; i < Object.keys(req.files).length; i++) {\r\n      if (filesUploaded[i] == \"image\") {\r\n        break\r\n      }\r\n      const index = parseInt(filesUploaded[i].split(\"-\")[2])\r\n      const subimage = files[`sub-image-${index}`][0];\r\n      const sharpSubFile = await sharp(subimage.buffer)\r\n        .resize({ width: 350, height: 350 })\r\n        .jpeg({ quality: 70 })\r\n        .toBuffer();\r\n      bucket\r\n        .file(subimages[index-1].imageURL)\r\n        .createWriteStream({\r\n          metadata: { cacheControl: \"no-cache, max-age=0\" },\r\n        })\r\n        .end(sharpSubFile);\r\n    }\r\n\r\n    await db.run(\r\n      \"UPDATE products SET name = ?, category = ?, desc = ?, info = ?, quantity = ?, price = ? WHERE id = ?\",\r\n      req.body[\"desktop-name\"] || req.body[\"mobile-name\"],\r\n      req.body.category,\r\n      req.body.desc,\r\n      req.body.info,\r\n      parseInt(req.body.quantity),\r\n      parseInt(req.body.price.substring(1)) * 100,\r\n      req.params.id\r\n    );\r\n\r\n    cache.del(\"explore\");\r\n    cache.del(req.params.id);\r\n    res.json({ status: \"200 OK\", message: \"Product successfully updated.\" });\r\n  }\r\n);\r\n\r\napp.post(\"/orders/create\", async (req, res) => {\r\n  const customer = req.cookies.customerID;\r\n  const paymentMethods = await stripe.paymentMethods.list({\r\n    customer,\r\n    type: \"card\",\r\n  });\r\n  let card = paymentMethods.data[0].id;\r\n\r\n  const {\r\n    secret,\r\n    product,\r\n    info,\r\n  }: {\r\n    secret: string;\r\n    product: product;\r\n    info: {\r\n      quantity: number;\r\n      daysRented: number;\r\n      startDate: number;\r\n      endDate: number;\r\n    };\r\n  } = cache.get(`tempcache-${customer}`, () => {\r\n    return \"\";\r\n  });\r\n\r\n  cache.del(`tempcache-${customer}`);\r\n  const account = (await cache.getAsync(product.accountID, async () => {\r\n    return await db.get(\r\n      \"SELECT * FROM accounts WHERE id = ?\",\r\n      product.accountID\r\n    );\r\n  })) as account;\r\n\r\n  const firebaseData = await cache.getAsync(`fire-${product.id}`, async () => {\r\n    const fireQuery = await firedb.collection(\"products\").doc(product.id).get();\r\n    return await fireQuery.data();\r\n  });\r\n  console.log(firebaseData);\r\n  const updatedDates: DateTable = updateDates(\r\n    firebaseData,\r\n    info.startDate,\r\n    info.endDate,\r\n    info.quantity,\r\n    product.quantity\r\n  );\r\n\r\n  console.log(updateDates);\r\n  await firedb\r\n    .collection(\"products\")\r\n    .doc(product.id)\r\n    .set(updatedDates, { merge: true });\r\n\r\n  cache.del(`fire-${product.id}`);\r\n  cache.del(`tempcache-${customer}`);\r\n\r\n  utils.sendMail(\r\n    req.body.email,\r\n    \"Order Confirmation\",\r\n    \"views/templates/location.html\",\r\n    {\r\n      USER: req.body.name,\r\n      EMAIL: account.email,\r\n      DATE: new Date(info.startDate).toDateString(),\r\n      ADDRESS: account.location,\r\n    }\r\n  );\r\n\r\n  utils.sendMail(account.email, \"New Order\", \"views/templates/order.html\", {\r\n    USER: account.name,\r\n    EMAIL: req.body.email,\r\n    ITEM: product.name,\r\n    QUANT: info.quantity,\r\n    DATE: new Date(info.startDate).toDateString(),\r\n    DATE2: new Date(info.endDate).toDateString(),\r\n  });\r\n  const total = product.price * info.quantity * info.daysRented;\r\n\r\n  console.log(info, [\r\n    product.id,\r\n    total,\r\n    {\r\n      id: customer,\r\n      name: req.body.name,\r\n      email: req.body.email,\r\n      quantity: info.quantity,\r\n    },\r\n    card,\r\n    info.endDate,\r\n  ]);\r\n\r\n  addJob(\r\n    \"completeOrder\",\r\n    completeOrder,\r\n    [\r\n      product.id,\r\n      total,\r\n      {\r\n        id: customer,\r\n        name: req.body.name,\r\n        email: req.body.email,\r\n      },\r\n      card,\r\n      info.endDate,\r\n      info.quantity,\r\n    ],\r\n    new Date(info.startDate)\r\n  );\r\n});\r\n\r\napp.post(\"/checkout\", async (req, res) => {\r\n  // ! ADD DATE VERIFICATION HERE\r\n  const customer = await stripe.customers.create();\r\n  const intent = await stripe.setupIntents.create({\r\n    customer: customer.id,\r\n  });\r\n\r\n  const session = cache.set(\r\n    customer.id,\r\n    { name: \"\", id: customer.id, email: \"\" } as customer,\r\n    18000000\r\n  );\r\n  res.cookie(\"customerID\", customer.id);\r\n  const { startDate, endDate, quantity, productID } = req.body;\r\n\r\n  const daysRented = Math.max((endDate - startDate) / 86400000, 1);\r\n\r\n  const product = (await cache.getAsync(productID, async () => {\r\n    return await db.get(\"SELECT * FROM products WHERE id = ?\", productID);\r\n  })) as product;\r\n\r\n  const total = product.price * quantity * daysRented;\r\n  cache.set(\r\n    `tempcache-${customer.id}`,\r\n    {\r\n      secret: intent.client_secret,\r\n      product,\r\n      info: { quantity, daysRented, startDate, endDate },\r\n    },\r\n    3600000\r\n  );\r\n  res.json({ status: \"200 OK\", message: \"Checkout page ready.\" });\r\n});\r\n\r\napp.delete(\"/products/delete/\", async (req, res) => {\r\n  const uid = (await cache.getAsync(\r\n    req.cookies.session,\r\n    async () => {\r\n      return await verifyCookie(req.cookies.session);\r\n    },\r\n    3600000\r\n  )) as string;\r\n  console.log(uid);\r\n  if (uid === undefined) {\r\n    res.status(403).send(\"403 Not Allowed\");\r\n    return;\r\n  }\r\n\r\n  const product = (await cache.getAsync(req.body.id, async () => {\r\n    return await db.get(\"SELECT * FROM products WHERE id = ?\", req.body.id);\r\n  })) as product;\r\n\r\n  const user = await getUser(uid);\r\n  if (user.id == product.accountID) {\r\n    await db.run(\"DELETE FROM products WHERE id = ?\", req.body.id);\r\n  }\r\n  cache.del(req.body.id);\r\n  cache.del(\"explore\");\r\n  res.json({ status: \"200 OK\", message: \"Product successfully deleted.\" });\r\n});\r\n// * GET REQUESTS\r\napp.get(\"/logout\", async (req, res) => {\r\n  res.clearCookie(\"session\");\r\n  res.redirect(\"/\");\r\n});\r\n\r\n\r\napp.listen(3000, async () => {\r\n  console.log(\"Server running...\");\r\n  console.log(\"\");\r\n  await persistSchedule();\r\n});\r\n", "import sqlite from \"sqlite3\";\r\nsqlite.verbose();\r\n\r\nclass Database {\r\n  _db: sqlite.Database;\r\n\r\n  constructor(path: string) {\r\n    this._db = new sqlite.Database(path);\r\n    this._db.run(\"PRAGMA journal_mode = WAL\");\r\n  }\r\n\r\n  run(query: string, ...params: any) {\r\n    return new Promise((resolve, reject) => {\r\n      this._db.run(\r\n        query,\r\n        ...params,\r\n        function (this: any, err: Error | null) {\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            resolve(this);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  get(query: string, ...params: any) {\r\n    return new Promise((resolve, reject) => {\r\n      this._db.get(query, ...params, (err: Error | null, row: any) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(row);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  all(query: string, ...params: any) {\r\n    return new Promise((resolve, reject) => {\r\n      this._db.all(query, ...params, (err: Error | null, rows: any[]) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(rows);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  exec(query: string, ...params: any) {\r\n    return new Promise((resolve, reject) => {\r\n      this._db.exec(query, (err: Error | null) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(this);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { Database };\r\n", "interface Cache {\r\n  [key: string]: any;\r\n}\r\nconst defaultCacheExpiration = 900000;\r\nclass CacheLayer {\r\n  _cache: Cache = {};\r\n  all() {\r\n    return this._cache;\r\n  }\r\n\r\n  get(\r\n    key: string,\r\n    func: () => any,\r\n    expiration: number = defaultCacheExpiration\r\n  ) {\r\n    let val = this._cache[key];\r\n    if (val === undefined) {\r\n      val = func();\r\n      this.set(key, val, expiration);\r\n    }\r\n    return val;\r\n  }\r\n\r\n  async getAsync(\r\n    key: string,\r\n    func: () => any,\r\n    expiration: number = defaultCacheExpiration\r\n  ) {\r\n    let val = this._cache[key];\r\n    if (val === undefined) {\r\n      val = func();\r\n      this.set(key, val, expiration);\r\n    }\r\n    return val;\r\n  }\r\n\r\n  set(key: string, val: any, expiration: number = defaultCacheExpiration) {\r\n    this._cache[key] = val;\r\n    setTimeout(() => {\r\n      this.del(key);\r\n    }, expiration);\r\n  }\r\n\r\n  del(key: string) {\r\n    delete this._cache[key];\r\n  }\r\n\r\n  flush() {\r\n    this._cache = {};\r\n  }\r\n\r\n  exists(key: string) {\r\n    return this._cache[key] !== undefined;\r\n  }\r\n}\r\n\r\nexport { CacheLayer };\r\n", "const msInADay: number = 86400000;\r\n\r\nfunction createDateRange(start: number, end: number): number[] {\r\n  const dateList: number[] = [];\r\n  let day: number = start;\r\n  if (end === start) {\r\n    return [start];\r\n  }\r\n\r\n  end -= msInADay;\r\n\r\n  while (day !== end) {\r\n    // Add 1 day, and push to list of dates\r\n    day += msInADay;\r\n    dateList.push(day);\r\n  }\r\n  return [start, ...dateList, (end += msInADay)];\r\n}\r\n\r\ninterface DateTable {\r\n  [timestamp: string]: number;\r\n}\r\n\r\nfunction updateDates(\r\n  dateTable: DateTable,\r\n  startDate: number,\r\n  endDate: number,\r\n  quantity: number,\r\n  totalQuantityForProduct: number\r\n) {\r\n  const dateTableKeys: string[] = Object.keys(dateTable);\r\n\r\n  // Filter for dates within start date and end date\r\n  const datesInRange = dateTableKeys.filter((date) => {\r\n    return parseInt(date) >= startDate && parseInt(date) <= endDate;\r\n  });\r\n\r\n  // Get quanties of dates within start date and end date\r\n  const quantitiesInRange = datesInRange.map(\r\n    (timestamp) => dateTable[timestamp.toString()]\r\n  );\r\n\r\n  // Get list of dates to be added\r\n  const datesToBeAdded = createDateRange(startDate, endDate);\r\n\r\n  // Check if the amount of product on that day minus quantity ordered is over 0, or if there are no orders during that timespan\r\n  if (\r\n    quantitiesInRange.some((productOnDay) => productOnDay - quantity > 0) ||\r\n    quantitiesInRange.length < 1\r\n  ) {\r\n    // Edit dateTable object to get final dates\r\n    for (const date of datesToBeAdded) {\r\n      if (dateTable[date]) {\r\n        // If date already exists, subtract quantity from it\r\n        dateTable[date] -= quantity;\r\n      } else {\r\n        // Else add that day, and set quantity to total quantity minus amount ordered\r\n        dateTable[date] = totalQuantityForProduct - quantity;\r\n      }\r\n    }\r\n    const returnDate = endDate + msInADay;\r\n    if (dateTable[returnDate]) {\r\n      // Add quantity back to date object after order completed if existing quantity on that day\r\n      dateTable[returnDate] += quantity;\r\n    } else {\r\n      // Else set quantity to total\r\n      dateTable[returnDate] = totalQuantityForProduct;\r\n    }\r\n    return dateTable;\r\n  }\r\n}\r\n\r\nexport { createDateRange, updateDates, DateTable };\r\n", "import lt from \"long-timeout\";\r\n\r\nlet actions: { [action: string]: Function } = {};\r\n\r\ninterface Job {\r\n  date: number;\r\n  name: string;\r\n  args: any[];\r\n  passed: boolean;\r\n}\r\n\r\nfunction addAction(name: string, action: Function): Function {\r\n  actions[name] = action;\r\n  return action;\r\n}\r\n\r\nfunction addEditAction(func: Function): Function {\r\n  actions[\"edit\"] = func;\r\n  return func;\r\n}\r\n\r\nfunction scheduleJob(func: Function, args: any[], date: Date) {\r\n  let delay = calculateDelay(date);\r\n  lt.setTimeout(() => {\r\n    console.log(\"executed\");\r\n    func(...args);\r\n  }, delay);\r\n}\r\n\r\nfunction calculateDelay(targetDate: Date): number {\r\n  let unixTargetDate = targetDate.getTime();\r\n  let unixDate = new Date().getTime();\r\n\r\n  let delay = Math.max(unixTargetDate - unixDate, 0);\r\n\r\n  return delay;\r\n}\r\n\r\nasync function loadJobs(jobs: { [job: string]: Job }) {\r\n  let date = new Date().getTime();\r\n  let ids = Object.keys(jobs);\r\n  const jobList = Object.values(jobs);\r\n\r\n  for (let i = 0; i < jobList.length; i++) {\r\n    let job = jobList[i];\r\n    if (date > job.date) {\r\n      if (job.passed == false) {\r\n        actions[job.name](...job.args);\r\n        await actions[\"edit\"](ids[i]);\r\n      }\r\n      continue;\r\n    }\r\n\r\n    scheduleJob(actions[job.name], job.args, new Date(job.date));\r\n  }\r\n}\r\n\r\nexport { addAction, addEditAction, loadJobs, scheduleJob, Job };\r\n"],
  "mappings": "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",
  "names": []
}
