{
  "version": 3,
  "sources": ["../app/utils.ts"],
  "sourcesContent": ["import crypto from \"crypto\";\r\nimport fs from \"fs\";\r\nimport nodemailer from \"nodemailer\";\r\n\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  service: \"gmail\",\r\n  auth: {\r\n    user: process.env.EMAIL,\r\n    pass: process.env.PASSWORD,\r\n  },\r\n});\r\n\r\nexport default {\r\n  computeHash: function (text: string): string {\r\n    const hash = crypto.createHash(\"sha256\").update(text).digest(\"base64\");\r\n    return hash;\r\n  },\r\n  generateUID: function (pattern?: string): string {\r\n    return \"xxxxxxxx-xxxx-4xxxx-xxx-x\".replace(/[xy]/g, function (c) {\r\n      var r = (Math.random() * 16) | 0,\r\n        v = c == \"x\" ? r : (r & 0x3) | 0x8;\r\n      return v.toString(16);\r\n    });\r\n  },\r\n  filter: function (req: any, file: any, cb: any) {\r\n    // Accept images only\r\n    if (\r\n      !file.originalname.match(\r\n        /\\.(jpg|JPG|jpeg|JPEG|png|PNG|jfif|JFIF|webm|WEBM)$/\r\n      )\r\n    ) {\r\n      req.fileValidationError = \"Only image files are allowed\";\r\n      return cb(new Error(\"Only image files are allowed\"), false);\r\n    }\r\n    cb(null, true);\r\n  },\r\n  getExt: function (filename: string): string {\r\n    var i = filename.lastIndexOf(\".\");\r\n    return i < 0 ? \"\" : filename.substr(i);\r\n  },\r\n  replaceValues: function (str: string, values: any): string {\r\n    var str = str.replace(/\\[\\w*\\]/g, function (match, val) {\r\n      return values[match.slice(1, -1)] || match;\r\n    });\r\n    return str;\r\n  },\r\n  getFileStream: async function (path: string) {\r\n    let reader = fs.createReadStream(path);\r\n\r\n    let promise = new Promise(function (resolve, reject) {\r\n      reader.on(\"data\", (chunk: Buffer) => resolve(chunk.toString()));\r\n      reader.on(\"error\", reject);\r\n    });\r\n\r\n    let data = await promise;\r\n    return data;\r\n  },\r\n  sendMail: async function (\r\n    recipient: string,\r\n    subject: string,\r\n    templatePath: string,\r\n    props: { [prop: string]: any }\r\n  ) {\r\n    const template = await this.getFileStream(templatePath);\r\n    const mailOptions = {\r\n      from: process.env.EMAIL,\r\n      to: recipient,\r\n      subject,\r\n      html: this.replaceValues(template, props),\r\n    };\r\n    transporter.sendMail(mailOptions, function (error: any, info: any) {\r\n      if (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n  },\r\n};\r\n"],
  "mappings": "mlBAAA,iCAAmB,qBACnB,EAAe,iBACf,EAAuB,yBAEvB,EAAmB,qBACnB,UAAO,SAEP,GAAM,GAAc,UAAW,gBAAgB,CAC7C,QAAS,QACT,KAAM,CACJ,KAAM,QAAQ,IAAI,MAClB,KAAM,QAAQ,IAAI,YAIf,EAAQ,CACb,YAAa,SAAU,EAAsB,CAE3C,MADa,WAAO,WAAW,UAAU,OAAO,GAAM,OAAO,WAG/D,YAAa,SAAU,EAA0B,CAC/C,MAAO,4BAA4B,QAAQ,QAAS,SAAU,EAAG,CAC/D,GAAI,GAAK,KAAK,SAAW,GAAM,EAC7B,EAAI,GAAK,IAAM,EAAK,EAAI,EAAO,EACjC,MAAO,GAAE,SAAS,OAGtB,OAAQ,SAAU,EAAU,EAAW,EAAS,CAE9C,GACE,CAAC,EAAK,aAAa,MACjB,sDAGF,SAAI,oBAAsB,+BACnB,EAAG,GAAI,OAAM,gCAAiC,IAEvD,EAAG,KAAM,KAEX,OAAQ,SAAU,EAA0B,CAC1C,GAAI,GAAI,EAAS,YAAY,KAC7B,MAAO,GAAI,EAAI,GAAK,EAAS,OAAO,IAEtC,cAAe,SAAU,EAAa,EAAqB,CACzD,GAAI,GAAM,EAAI,QAAQ,WAAY,SAAU,EAAO,EAAK,CACtD,MAAO,GAAO,EAAM,MAAM,EAAG,MAAQ,IAEvC,MAAO,IAET,cAAe,eAAgB,EAAc,CAC3C,GAAI,GAAS,UAAG,iBAAiB,GAQjC,MADW,MALG,IAAI,SAAQ,SAAU,EAAS,EAAQ,CACnD,EAAO,GAAG,OAAQ,AAAC,GAAkB,EAAQ,EAAM,aACnD,EAAO,GAAG,QAAS,MAMvB,SAAU,eACR,EACA,EACA,EACA,EACA,CACA,GAAM,GAAW,KAAM,MAAK,cAAc,GACpC,EAAc,CAClB,KAAM,QAAQ,IAAI,MAClB,GAAI,EACJ,UACA,KAAM,KAAK,cAAc,EAAU,IAErC,EAAY,SAAS,EAAa,SAAU,EAAY,EAAW,CACjE,AAAI,GACF,QAAQ,IAAI",
  "names": []
}
